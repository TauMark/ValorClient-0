class
 refid "robotlegs.bender.extensions.matching:TypeMatcher"
 instance QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher")
  extends QName(PackageNamespace(""), "Object")
  implements Multiname("ITypeMatcher", [PackageNamespace("robotlegs.bender.extensions.matching")])
  implements Multiname("ITypeMatcherFactory", [PackageNamespace("robotlegs.bender.extensions.matching")])
  flag SEALED
  flag PROTECTEDNS
  protectedns ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher")
  iinit
   name "robotlegs.bender.extensions.matching:TypeMatcher/TypeMatcher"
   refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/init"
   body
    maxstack 3
    localcount 1
    initscopedepth 4
    maxscopedepth 5
    code
     getlocal0
     pushscope

     getlocal0
     getlex              Multiname("Vector", [PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PackageNamespace("__AS3__.vec"), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
     getlex              QName(PackageNamespace(""), "Class")
     applytype           1
     construct           0
     initproperty        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_allOfTypes")

     getlocal0
     getlex              Multiname("Vector", [PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PackageNamespace("__AS3__.vec"), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
     getlex              QName(PackageNamespace(""), "Class")
     applytype           1
     construct           0
     initproperty        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_anyOfTypes")

     getlocal0
     getlex              Multiname("Vector", [PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PackageNamespace("__AS3__.vec"), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
     getlex              QName(PackageNamespace(""), "Class")
     applytype           1
     construct           0
     initproperty        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_noneOfTypes")

     getlocal0
     constructsuper      0

     returnvoid
    end ; code
   end ; body
  end ; method
  trait const QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_allOfTypes") type TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Class")>) end
  trait const QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_anyOfTypes") type TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Class")>) end
  trait const QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_noneOfTypes") type TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Class")>) end
  trait slot QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_typeFilter") type QName(PackageNamespace("robotlegs.bender.extensions.matching"), "ITypeFilter") end
  trait method QName(PackageNamespace(""), "allOf")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/allOf"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/allOf"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher")
    flag NEED_REST
    flag HAS_PARAM_NAMES
    body
     maxstack 3
     localcount 2
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getlocal1
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_allOfTypes")
      callpropvoid        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "pushAddedTypesTo"), 2

      getlocal0
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "anyOf")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/anyOf"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/anyOf"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher")
    flag NEED_REST
    flag HAS_PARAM_NAMES
    body
     maxstack 3
     localcount 2
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getlocal1
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_anyOfTypes")
      callpropvoid        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "pushAddedTypesTo"), 2

      getlocal0
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "noneOf")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/noneOf"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/noneOf"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher")
    flag NEED_REST
    flag HAS_PARAM_NAMES
    body
     maxstack 3
     localcount 2
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getlocal1
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_noneOfTypes")
      callpropvoid        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "pushAddedTypesTo"), 2

      getlocal0
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "createTypeFilter")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/createTypeFilter"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/createTypeFilter"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "ITypeFilter")
    body
     maxstack 3
     localcount 2
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_typeFilter")
      coerce              QName(PackageNamespace("robotlegs.bender.extensions.matching"), "ITypeFilter")
      dup
      iftrue              L12

      pop
      getlocal0
      callproperty        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "buildTypeFilter"), 0
      coerce              QName(PackageNamespace("robotlegs.bender.extensions.matching"), "ITypeFilter")
L12:
      dup
      setlocal1

      setproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_typeFilter")

      getlocal1
      kill                1
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "lock")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/lock"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/lock"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "ITypeMatcherFactory")
    body
     maxstack 1
     localcount 1
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      callpropvoid        QName(PackageNamespace(""), "createTypeFilter"), 0

      getlocal0
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(PackageNamespace(""), "clone")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/clone"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/clone"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher")
    body
     maxstack 2
     localcount 1
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      findpropstrict      QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher")
      constructprop       QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcher"), 0
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_allOfTypes")
      callproperty        QName(PackageNamespace(""), "allOf"), 1
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_anyOfTypes")
      callproperty        QName(PackageNamespace(""), "anyOf"), 1
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_noneOfTypes")
      callproperty        QName(PackageNamespace(""), "noneOf"), 1
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "buildTypeFilter")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/protected:buildTypeFilter"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/robotlegs.bender.extensions.matching:TypeMatcher:buildTypeFilter"
    returns QName(PackageNamespace("robotlegs.bender.extensions.matching"), "ITypeFilter")
    body
     maxstack 4
     localcount 1
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_allOfTypes")
      getproperty         QName(PackageNamespace(""), "length")
      pushbyte            0
      equals
      dup
      iffalse             L15

      pop
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_anyOfTypes")
      getproperty         QName(PackageNamespace(""), "length")
      pushbyte            0
      equals
L15:
      dup
      iffalse             L23

      pop
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_noneOfTypes")
      getproperty         QName(PackageNamespace(""), "length")
      pushbyte            0
      equals
L23:
      iffalse             L29

      findpropstrict      QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcherError")
      getlex              QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcherError")
      getproperty         QName(PackageNamespace(""), "EMPTY_MATCHER")
      constructprop       QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeMatcherError"), 1
      throw

L29:
      findpropstrict      QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeFilter")
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_allOfTypes")
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_anyOfTypes")
      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_noneOfTypes")
      constructprop       QName(PackageNamespace("robotlegs.bender.extensions.matching"), "TypeFilter"), 3
      returnvalue
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "pushAddedTypesTo")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/protected:pushAddedTypesTo"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/robotlegs.bender.extensions.matching:TypeMatcher:pushAddedTypesTo"
    param QName(PackageNamespace(""), "Array")
    param TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Class")>)
    returns QName(PackageNamespace(""), "void")
    flag HAS_PARAM_NAMES
    paramname "_arg_1"
    paramname "_arg_2"
    body
     maxstack 3
     localcount 3
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      getlocal0
      getproperty         QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "_typeFilter")
      coerce_a
      dup
      iffalse             L11

      pop
      getlocal0
      callproperty        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "throwSealedMatcherError"), 0
      coerce_a
L11:
      pop
      getlocal0
      getlocal1
      getlocal2
      callpropvoid        QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "pushValuesToClassVector"), 2

      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "throwSealedMatcherError")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/protected:throwSealedMatcherError"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/robotlegs.bender.extensions.matching:TypeMatcher:throwSealedMatcherError"
    returns QName(PackageNamespace(""), "void")
    body
     maxstack 2
     localcount 1
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      findpropstrict      QName(PackageNamespace("flash.errors"), "IllegalOperationError")
      pushstring          "This TypeMatcher has been sealed and can no longer be configured"
      constructprop       QName(PackageNamespace("flash.errors"), "IllegalOperationError"), 1
      throw
     end ; code
    end ; body
   end ; method
  end ; trait
  trait method QName(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), "pushValuesToClassVector")
   method
    name "robotlegs.bender.extensions.matching:TypeMatcher/protected:pushValuesToClassVector"
    refid "robotlegs.bender.extensions.matching:TypeMatcher/instance/robotlegs.bender.extensions.matching:TypeMatcher:pushValuesToClassVector"
    param QName(PackageNamespace(""), "Array")
    param TypeName(QName(PackageNamespace("__AS3__.vec"), "Vector")<QName(PackageNamespace(""), "Class")>)
    returns QName(PackageNamespace(""), "void")
    flag HAS_PARAM_NAMES
    paramname "_arg_1"
    paramname "_arg_2"
    body
     maxstack 3
     localcount 6
     initscopedepth 4
     maxscopedepth 5
     code
      getlocal0
      pushscope

      pushnull
      coerce              QName(PackageNamespace(""), "Class")
      setlocal3

      getlocal1
      getproperty         QName(PackageNamespace(""), "length")
      pushbyte            1
      equals
      dup
      iffalse             L27

      pop
      getlocal1
      pushbyte            0
      getproperty         MultinameL([PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
      getlex              QName(PackageNamespace(""), "Array")
      istypelate
      dup
      iftrue              L27

      pop
      getlocal1
      pushbyte            0
      getproperty         MultinameL([PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
      getlex              Multiname("Vector", [PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PackageNamespace("__AS3__.vec"), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
      getlex              QName(PackageNamespace(""), "Class")
      applytype           1
      istypelate
L27:
      iffalse             L50

      pushbyte            0
      setlocal            4

      getlocal1
      pushbyte            0
      getproperty         MultinameL([PrivateNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"), PackageNamespace("robotlegs.bender.extensions.matching"), PackageNamespace(""), PrivateNamespace("TypeMatcher.as$112"), PackageInternalNs("robotlegs.bender.extensions.matching"), Namespace("http://adobe.com/AS3/2006/builtin"), StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
      coerce_a
      setlocal            5

      jump                L45

L36:
      label
      getlocal            5
      getlocal            4
      nextvalue
      coerce              QName(PackageNamespace(""), "Class")
      setlocal3

      getlocal2
      getlocal3
      callpropvoid        QName(Namespace("http://adobe.com/AS3/2006/builtin"), "push"), 1

L45:
      hasnext2            5, 4
      iftrue              L36

      kill                5
      kill                4
      jump                L69

L50:
      pushbyte            0
      setlocal            4

      getlocal1
      coerce_a
      setlocal            5

      jump                L65

L56:
      label
      getlocal            5
      getlocal            4
      nextvalue
      coerce              QName(PackageNamespace(""), "Class")
      setlocal3

      getlocal2
      getlocal3
      callpropvoid        QName(Namespace("http://adobe.com/AS3/2006/builtin"), "push"), 1

L65:
      hasnext2            5, 4
      iftrue              L56

      kill                5
      kill                4
L69:
      returnvoid
     end ; code
    end ; body
   end ; method
  end ; trait
 end ; instance
 cinit
  name ""
  refid "robotlegs.bender.extensions.matching:TypeMatcher/class/init"
  body
   maxstack 1
   localcount 1
   initscopedepth 3
   maxscopedepth 4
   code
    returnvoid
   end ; code
  end ; body
 end ; method
end ; class
